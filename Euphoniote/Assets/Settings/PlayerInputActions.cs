//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/Settings/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Settings/PlayerInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""95e17197-c8a3-4790-b6ad-354c6925ec63"",
            ""actions"": [
                {
                    ""name"": ""FretQ"",
                    ""type"": ""Button"",
                    ""id"": ""7407bd0a-b82a-4742-b441-7692b7156dcf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FretW"",
                    ""type"": ""Button"",
                    ""id"": ""9d37f62d-a60a-41fa-9682-53c730dded29"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FretE"",
                    ""type"": ""Button"",
                    ""id"": ""4fe6b022-9279-4c91-a80b-02e701a84ee8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FretA"",
                    ""type"": ""Button"",
                    ""id"": ""2592c484-cc43-4120-9438-0b6c57e76fce"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FretS"",
                    ""type"": ""Button"",
                    ""id"": ""5fa4e6a2-5d1c-41fa-9eae-b6e23870aea0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FretD"",
                    ""type"": ""Button"",
                    ""id"": ""ac1795a3-e0b8-4c12-8e2c-e4f89578eab6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpStrum"",
                    ""type"": ""Button"",
                    ""id"": ""a3cef801-0c27-4d6e-81c9-b89287521e85"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownStrum"",
                    ""type"": ""Button"",
                    ""id"": ""41e4ceac-9134-4d0b-a648-a336cfadb65a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldLeft"",
                    ""type"": ""Button"",
                    ""id"": ""a649796e-74d9-4912-aba9-43e89a4c4d87"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldRight"",
                    ""type"": ""Button"",
                    ""id"": ""1ca63910-9f39-4fbb-9b31-2dc32346eb4d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""47ac2143-bd4e-4e53-bcea-b78da4baeb8d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e98afb10-a6f0-466d-957a-865a7321c88d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FretQ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c0b8085-2719-474e-8459-2acb9e0513b8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FretW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2afbe25e-d5ad-4dda-8b74-f3a9cd6d58c9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FretE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f36fcee3-4205-4b4b-8544-9ed1fdd67af0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FretA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18b517bb-e8c5-432a-96aa-985bc9b86302"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FretS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e4a8cf8-2e26-4eab-b029-cae238565e5e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FretD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92d998fb-a325-41df-a77e-488257807d6e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpStrum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a04dac04-adf2-42ed-ac1e-d8cf03a42fe7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownStrum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0473c826-e2ae-4844-94a2-375200c9bc67"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99942cf8-aa0f-4ad2-ba2d-380a8980dee2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd5d3bc1-b5ac-404d-b065-c03afd09029d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_FretQ = m_Gameplay.FindAction("FretQ", throwIfNotFound: true);
        m_Gameplay_FretW = m_Gameplay.FindAction("FretW", throwIfNotFound: true);
        m_Gameplay_FretE = m_Gameplay.FindAction("FretE", throwIfNotFound: true);
        m_Gameplay_FretA = m_Gameplay.FindAction("FretA", throwIfNotFound: true);
        m_Gameplay_FretS = m_Gameplay.FindAction("FretS", throwIfNotFound: true);
        m_Gameplay_FretD = m_Gameplay.FindAction("FretD", throwIfNotFound: true);
        m_Gameplay_UpStrum = m_Gameplay.FindAction("UpStrum", throwIfNotFound: true);
        m_Gameplay_DownStrum = m_Gameplay.FindAction("DownStrum", throwIfNotFound: true);
        m_Gameplay_HoldLeft = m_Gameplay.FindAction("HoldLeft", throwIfNotFound: true);
        m_Gameplay_HoldRight = m_Gameplay.FindAction("HoldRight", throwIfNotFound: true);
        m_Gameplay_Pause = m_Gameplay.FindAction("Pause", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, PlayerInputActions.Gameplay.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_FretQ;
    private readonly InputAction m_Gameplay_FretW;
    private readonly InputAction m_Gameplay_FretE;
    private readonly InputAction m_Gameplay_FretA;
    private readonly InputAction m_Gameplay_FretS;
    private readonly InputAction m_Gameplay_FretD;
    private readonly InputAction m_Gameplay_UpStrum;
    private readonly InputAction m_Gameplay_DownStrum;
    private readonly InputAction m_Gameplay_HoldLeft;
    private readonly InputAction m_Gameplay_HoldRight;
    private readonly InputAction m_Gameplay_Pause;
    /// <summary>
    /// Provides access to input actions defined in input action map "Gameplay".
    /// </summary>
    public struct GameplayActions
    {
        private @PlayerInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public GameplayActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/FretQ".
        /// </summary>
        public InputAction @FretQ => m_Wrapper.m_Gameplay_FretQ;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/FretW".
        /// </summary>
        public InputAction @FretW => m_Wrapper.m_Gameplay_FretW;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/FretE".
        /// </summary>
        public InputAction @FretE => m_Wrapper.m_Gameplay_FretE;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/FretA".
        /// </summary>
        public InputAction @FretA => m_Wrapper.m_Gameplay_FretA;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/FretS".
        /// </summary>
        public InputAction @FretS => m_Wrapper.m_Gameplay_FretS;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/FretD".
        /// </summary>
        public InputAction @FretD => m_Wrapper.m_Gameplay_FretD;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/UpStrum".
        /// </summary>
        public InputAction @UpStrum => m_Wrapper.m_Gameplay_UpStrum;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/DownStrum".
        /// </summary>
        public InputAction @DownStrum => m_Wrapper.m_Gameplay_DownStrum;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/HoldLeft".
        /// </summary>
        public InputAction @HoldLeft => m_Wrapper.m_Gameplay_HoldLeft;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/HoldRight".
        /// </summary>
        public InputAction @HoldRight => m_Wrapper.m_Gameplay_HoldRight;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/Pause".
        /// </summary>
        public InputAction @Pause => m_Wrapper.m_Gameplay_Pause;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="GameplayActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="GameplayActions" />
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @FretQ.started += instance.OnFretQ;
            @FretQ.performed += instance.OnFretQ;
            @FretQ.canceled += instance.OnFretQ;
            @FretW.started += instance.OnFretW;
            @FretW.performed += instance.OnFretW;
            @FretW.canceled += instance.OnFretW;
            @FretE.started += instance.OnFretE;
            @FretE.performed += instance.OnFretE;
            @FretE.canceled += instance.OnFretE;
            @FretA.started += instance.OnFretA;
            @FretA.performed += instance.OnFretA;
            @FretA.canceled += instance.OnFretA;
            @FretS.started += instance.OnFretS;
            @FretS.performed += instance.OnFretS;
            @FretS.canceled += instance.OnFretS;
            @FretD.started += instance.OnFretD;
            @FretD.performed += instance.OnFretD;
            @FretD.canceled += instance.OnFretD;
            @UpStrum.started += instance.OnUpStrum;
            @UpStrum.performed += instance.OnUpStrum;
            @UpStrum.canceled += instance.OnUpStrum;
            @DownStrum.started += instance.OnDownStrum;
            @DownStrum.performed += instance.OnDownStrum;
            @DownStrum.canceled += instance.OnDownStrum;
            @HoldLeft.started += instance.OnHoldLeft;
            @HoldLeft.performed += instance.OnHoldLeft;
            @HoldLeft.canceled += instance.OnHoldLeft;
            @HoldRight.started += instance.OnHoldRight;
            @HoldRight.performed += instance.OnHoldRight;
            @HoldRight.canceled += instance.OnHoldRight;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="GameplayActions" />
        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @FretQ.started -= instance.OnFretQ;
            @FretQ.performed -= instance.OnFretQ;
            @FretQ.canceled -= instance.OnFretQ;
            @FretW.started -= instance.OnFretW;
            @FretW.performed -= instance.OnFretW;
            @FretW.canceled -= instance.OnFretW;
            @FretE.started -= instance.OnFretE;
            @FretE.performed -= instance.OnFretE;
            @FretE.canceled -= instance.OnFretE;
            @FretA.started -= instance.OnFretA;
            @FretA.performed -= instance.OnFretA;
            @FretA.canceled -= instance.OnFretA;
            @FretS.started -= instance.OnFretS;
            @FretS.performed -= instance.OnFretS;
            @FretS.canceled -= instance.OnFretS;
            @FretD.started -= instance.OnFretD;
            @FretD.performed -= instance.OnFretD;
            @FretD.canceled -= instance.OnFretD;
            @UpStrum.started -= instance.OnUpStrum;
            @UpStrum.performed -= instance.OnUpStrum;
            @UpStrum.canceled -= instance.OnUpStrum;
            @DownStrum.started -= instance.OnDownStrum;
            @DownStrum.performed -= instance.OnDownStrum;
            @DownStrum.canceled -= instance.OnDownStrum;
            @HoldLeft.started -= instance.OnHoldLeft;
            @HoldLeft.performed -= instance.OnHoldLeft;
            @HoldLeft.canceled -= instance.OnHoldLeft;
            @HoldRight.started -= instance.OnHoldRight;
            @HoldRight.performed -= instance.OnHoldRight;
            @HoldRight.canceled -= instance.OnHoldRight;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />.
        /// </summary>
        /// <seealso cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />
        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="GameplayActions.AddCallbacks(IGameplayActions)" />
        /// <seealso cref="GameplayActions.RemoveCallbacks(IGameplayActions)" />
        /// <seealso cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />
        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="GameplayActions" /> instance referencing this action map.
    /// </summary>
    public GameplayActions @Gameplay => new GameplayActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Gameplay" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="GameplayActions.AddCallbacks(IGameplayActions)" />
    /// <seealso cref="GameplayActions.RemoveCallbacks(IGameplayActions)" />
    public interface IGameplayActions
    {
        /// <summary>
        /// Method invoked when associated input action "FretQ" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFretQ(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "FretW" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFretW(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "FretE" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFretE(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "FretA" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFretA(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "FretS" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFretS(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "FretD" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFretD(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UpStrum" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUpStrum(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DownStrum" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDownStrum(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "HoldLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHoldLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "HoldRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHoldRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPause(InputAction.CallbackContext context);
    }
}
